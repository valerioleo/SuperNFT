{
  "address": "0x3F7Ddc6d90266aB7CF0578d470E0ba47aF8d40dd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0bc1e9e1e9ccdd7faa44f079fd3812b4f0c58d2a0ed325f95b210de3c059147a",
  "receipt": {
    "to": null,
    "from": "0xA27DF20E6579aC472481F0Ea918165d24bFb713b",
    "contractAddress": "0x3F7Ddc6d90266aB7CF0578d470E0ba47aF8d40dd",
    "transactionIndex": 4,
    "gasUsed": "1074141",
    "logsBloom": "0x
    "blockHash": "0x85ef9d797186f9f24007d2cc1afd778c4dbc6aa7df8546c37a9e2d939f947328",
    "transactionHash": "0x0bc1e9e1e9ccdd7faa44f079fd3812b4f0c58d2a0ed325f95b210de3c059147a",
    "logs": [],
    "blockNumber": 30597012,
    "cumulativeGasUsed": "1383162",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e5cb316cfb49c243438d542b1d510f55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenHelper.sol\":\"TokenHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Raffle/IRaffleTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n\\n/// @title A mintable NFT ticket for Coinburp Raffle\\n/// @author Valerio Leo @valerioHQ\\ninterface IRaffleTicket is IERC1155 {\\n\\tfunction mint(address to, uint256 tokenId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8c2c769eb627b9b166284bb31309aaeb8e38790b6aab5aa2e115314ce43be4d2\",\"license\":\"MIT\"},\"contracts/TokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"./Raffle/IRaffleTicket.sol\\\";\\n\\nlibrary TokenHelper {\\n\\tfunction ERC20Transfer(\\n\\t\\taddress token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t)\\n\\t\\tpublic\\n\\t{\\n\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount));\\n\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance');\\n\\t}\\n\\n    function ERC20TransferFrom(\\n\\t\\t\\taddress token,\\n\\t\\t\\taddress from,\\n\\t\\t\\taddress to,\\n\\t\\t\\tuint256 amount\\n    )\\n\\t\\t\\tpublic\\n\\t\\t{\\n\\t\\t\\t(bool success, bytes memory data) =\\n\\t\\t\\t\\t\\ttoken.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount));\\n\\t\\t\\trequire(success && (data.length == 0 || abi.decode(data, (bool))), 'ERC20: transfer amount exceeds balance or allowance');\\n    }\\n\\n    function transferFrom(\\n        address token,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    )\\n            public\\n            returns (bool)\\n        {\\n                (bool success,) = token.call(abi.encodeWithSelector(IERC721.transferFrom.selector, from, to, tokenId));\\n\\n                // in the ERC721 the transfer doesn't return a bool. So we need to check explicitly.\\n                return success;\\n    }\\n\\n    function ERC155transferFrom(\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data,\\n        address from,\\n        address to\\n    )\\n            public\\n            returns (bool)\\n        {\\n                (bool success,) = token.call(abi.encodeWithSelector(IERC1155.safeTransferFrom.selector, from, to, tokenId, amount, data));\\n\\n                // in the ERC1155 the transfer doesn't return a bool. So we need to check explicitly.\\n                return success;\\n    }\\n\\n    function _mintTickets(\\n        address ticket,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        (bool success,) = ticket.call(abi.encodeWithSelector(IRaffleTicket.mint.selector, to, 0, amount));\\n\\n        require(success, 'ERC1155: mint failed');\\n    }\\n\\n    function transferNft(\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data,\\n        address from,\\n        address to\\n    ) public returns (bool) {\\n        bool isERC1155 = IERC1155(token).supportsInterface(type(IERC1155).interfaceId);\\n\\n        if(isERC1155) {\\n            return ERC155transferFrom(token, tokenId, amount, data, from, to);\\n        }\\n        else {\\n            return transferFrom(token, tokenId, from, to);\\n        }\\n    }\\n\\n    function ownerOf(\\n        address tokenAddress,\\n        uint256 tokenId\\n    ) public view returns (address) {\\n        return IERC721(tokenAddress).ownerOf(tokenId);\\n    }\\n}\",\"keccak256\":\"0xd3b82e78120a05951cfe4e95c11f267c12efe9d971d7513e19964cf7a9ae1c89\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x611284610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80635043eee6116100655780635043eee6146101365780639059b1541461015f578063a1c011241461019c578063e59fdd36146101c557610087565b806316b780ee1461008c5780631f29d2dc146100c957806325b69537146100f9575b600080fd5b81801561009857600080fd5b506100b360048036038101906100ae9190610afb565b6101ee565b6040516100c09190610bbf565b60405180910390f35b6100e360048036038101906100de9190610bda565b6102c3565b6040516100f09190610c29565b60405180910390f35b81801561010557600080fd5b50610120600480360381019061011b9190610afb565b610347565b60405161012d9190610bbf565b60405180910390f35b81801561014257600080fd5b5061015d60048036038101906101589190610c44565b610440565b005b81801561016b57600080fd5b5061018660048036038101906101819190610c97565b61056d565b6040516101939190610bbf565b60405180910390f35b8180156101a857600080fd5b506101c360048036038101906101be9190610cfe565b610660565b005b8180156101d157600080fd5b506101ec60048036038101906101e79190610c44565b6107b8565b005b6000808773ffffffffffffffffffffffffffffffffffffffff166301ffc9a77fd9b67a26000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161024a9190610da0565b602060405180830381865afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b9190610de7565b905080156102a9576102a1888888888888610347565b9150506102b9565b6102b58888868661056d565b9150505b9695505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016102fe9190610e23565b602060405180830381865afa15801561031b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033f9190610e53565b905092915050565b6000808773ffffffffffffffffffffffffffffffffffffffff1663f242432a60e01b85858a8a8a604051602401610382959493929190610f17565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103ec9190610fad565b6000604051808303816000865af19150503d8060008114610429576040519150601f19603f3d011682016040523d82523d6000602084013e61042e565b606091505b50509050809150509695505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663156e29f660e01b8460008560405160240161047793929190611016565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104e19190610fad565b6000604051808303816000865af19150503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b5050905080610567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055e906110aa565b60405180910390fd5b50505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8585886040516024016105a4939291906110ca565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161060e9190610fad565b6000604051808303816000865af19150503d806000811461064b576040519150601f19603f3d011682016040523d82523d6000602084013e610650565b606091505b5050905080915050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610697939291906110ca565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107019190610fad565b6000604051808303816000865af19150503d806000811461073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b5091509150818015610771575060008151148061077057508080602001905181019061076f9190610de7565b5b5b6107b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a790611173565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016107ed929190611193565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108579190610fad565b6000604051808303816000865af19150503d8060008114610894576040519150601f19603f3d011682016040523d82523d6000602084013e610899565b606091505b50915091508180156108c757506000815114806108c65750808060200190518101906108c59190610de7565b5b5b610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd9061122e565b60405180910390fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061094c82610921565b9050919050565b61095c81610941565b811461096757600080fd5b50565b60008135905061097981610953565b92915050565b6000819050919050565b6109928161097f565b811461099d57600080fd5b50565b6000813590506109af81610989565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a08826109bf565b810181811067ffffffffffffffff82111715610a2757610a266109d0565b5b80604052505050565b6000610a3a61090d565b9050610a4682826109ff565b919050565b600067ffffffffffffffff821115610a6657610a656109d0565b5b610a6f826109bf565b9050602081019050919050565b82818337600083830152505050565b6000610a9e610a9984610a4b565b610a30565b905082815260208101848484011115610aba57610ab96109ba565b5b610ac5848285610a7c565b509392505050565b600082601f830112610ae257610ae16109b5565b5b8135610af2848260208601610a8b565b91505092915050565b60008060008060008060c08789031215610b1857610b17610917565b5b6000610b2689828a0161096a565b9650506020610b3789828a016109a0565b9550506040610b4889828a016109a0565b945050606087013567ffffffffffffffff811115610b6957610b6861091c565b5b610b7589828a01610acd565b9350506080610b8689828a0161096a565b92505060a0610b9789828a0161096a565b9150509295509295509295565b60008115159050919050565b610bb981610ba4565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b60008060408385031215610bf157610bf0610917565b5b6000610bff8582860161096a565b9250506020610c10858286016109a0565b9150509250929050565b610c2381610941565b82525050565b6000602082019050610c3e6000830184610c1a565b92915050565b600080600060608486031215610c5d57610c5c610917565b5b6000610c6b8682870161096a565b9350506020610c7c8682870161096a565b9250506040610c8d868287016109a0565b9150509250925092565b60008060008060808587031215610cb157610cb0610917565b5b6000610cbf8782880161096a565b9450506020610cd0878288016109a0565b9350506040610ce18782880161096a565b9250506060610cf28782880161096a565b91505092959194509250565b60008060008060808587031215610d1857610d17610917565b5b6000610d268782880161096a565b9450506020610d378782880161096a565b9350506040610d488782880161096a565b9250506060610d59878288016109a0565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d9a81610d65565b82525050565b6000602082019050610db56000830184610d91565b92915050565b610dc481610ba4565b8114610dcf57600080fd5b50565b600081519050610de181610dbb565b92915050565b600060208284031215610dfd57610dfc610917565b5b6000610e0b84828501610dd2565b91505092915050565b610e1d8161097f565b82525050565b6000602082019050610e386000830184610e14565b92915050565b600081519050610e4d81610953565b92915050565b600060208284031215610e6957610e68610917565b5b6000610e7784828501610e3e565b91505092915050565b610e8981610941565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ec9578082015181840152602081019050610eae565b83811115610ed8576000848401525b50505050565b6000610ee982610e8f565b610ef38185610e9a565b9350610f03818560208601610eab565b610f0c816109bf565b840191505092915050565b600060a082019050610f2c6000830188610e80565b610f396020830187610e80565b610f466040830186610e14565b610f536060830185610e14565b8181036080830152610f658184610ede565b90509695505050505050565b600081905092915050565b6000610f8782610e8f565b610f918185610f71565b9350610fa1818560208601610eab565b80840191505092915050565b6000610fb98284610f7c565b915081905092915050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611000610ffb610ff684610fc4565b610fdb565b610fce565b9050919050565b61101081610fe5565b82525050565b600060608201905061102b6000830186610e80565b6110386020830185611007565b6110456040830184610e14565b949350505050565b600082825260208201905092915050565b7f455243313135353a206d696e74206661696c6564000000000000000000000000600082015250565b600061109460148361104d565b915061109f8261105e565b602082019050919050565b600060208201905081810360008301526110c381611087565b9050919050565b60006060820190506110df6000830186610e80565b6110ec6020830185610e80565b6110f96040830184610e14565b949350505050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e6365206f7220616c6c6f77616e636500000000000000000000000000602082015250565b600061115d60338361104d565b915061116882611101565b604082019050919050565b6000602082019050818103600083015261118c81611150565b9050919050565b60006040820190506111a86000830185610e80565b6111b56020830184610e14565b9392505050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061121860268361104d565b9150611223826111bc565b604082019050919050565b600060208201905081810360008301526112478161120b565b905091905056fea264697066735822122093ae11cb65a7a58ca55c48c38b6bdc7b9b71c0bd179c52300fcd4a9a6318b24864736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80635043eee6116100655780635043eee6146101365780639059b1541461015f578063a1c011241461019c578063e59fdd36146101c557610087565b806316b780ee1461008c5780631f29d2dc146100c957806325b69537146100f9575b600080fd5b81801561009857600080fd5b506100b360048036038101906100ae9190610afb565b6101ee565b6040516100c09190610bbf565b60405180910390f35b6100e360048036038101906100de9190610bda565b6102c3565b6040516100f09190610c29565b60405180910390f35b81801561010557600080fd5b50610120600480360381019061011b9190610afb565b610347565b60405161012d9190610bbf565b60405180910390f35b81801561014257600080fd5b5061015d60048036038101906101589190610c44565b610440565b005b81801561016b57600080fd5b5061018660048036038101906101819190610c97565b61056d565b6040516101939190610bbf565b60405180910390f35b8180156101a857600080fd5b506101c360048036038101906101be9190610cfe565b610660565b005b8180156101d157600080fd5b506101ec60048036038101906101e79190610c44565b6107b8565b005b6000808773ffffffffffffffffffffffffffffffffffffffff166301ffc9a77fd9b67a26000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161024a9190610da0565b602060405180830381865afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b9190610de7565b905080156102a9576102a1888888888888610347565b9150506102b9565b6102b58888868661056d565b9150505b9695505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016102fe9190610e23565b602060405180830381865afa15801561031b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033f9190610e53565b905092915050565b6000808773ffffffffffffffffffffffffffffffffffffffff1663f242432a60e01b85858a8a8a604051602401610382959493929190610f17565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103ec9190610fad565b6000604051808303816000865af19150503d8060008114610429576040519150601f19603f3d011682016040523d82523d6000602084013e61042e565b606091505b50509050809150509695505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663156e29f660e01b8460008560405160240161047793929190611016565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104e19190610fad565b6000604051808303816000865af19150503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b5050905080610567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055e906110aa565b60405180910390fd5b50505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8585886040516024016105a4939291906110ca565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161060e9190610fad565b6000604051808303816000865af19150503d806000811461064b576040519150601f19603f3d011682016040523d82523d6000602084013e610650565b606091505b5050905080915050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610697939291906110ca565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107019190610fad565b6000604051808303816000865af19150503d806000811461073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b5091509150818015610771575060008151148061077057508080602001905181019061076f9190610de7565b5b5b6107b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a790611173565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016107ed929190611193565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108579190610fad565b6000604051808303816000865af19150503d8060008114610894576040519150601f19603f3d011682016040523d82523d6000602084013e610899565b606091505b50915091508180156108c757506000815114806108c65750808060200190518101906108c59190610de7565b5b5b610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd9061122e565b60405180910390fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061094c82610921565b9050919050565b61095c81610941565b811461096757600080fd5b50565b60008135905061097981610953565b92915050565b6000819050919050565b6109928161097f565b811461099d57600080fd5b50565b6000813590506109af81610989565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a08826109bf565b810181811067ffffffffffffffff82111715610a2757610a266109d0565b5b80604052505050565b6000610a3a61090d565b9050610a4682826109ff565b919050565b600067ffffffffffffffff821115610a6657610a656109d0565b5b610a6f826109bf565b9050602081019050919050565b82818337600083830152505050565b6000610a9e610a9984610a4b565b610a30565b905082815260208101848484011115610aba57610ab96109ba565b5b610ac5848285610a7c565b509392505050565b600082601f830112610ae257610ae16109b5565b5b8135610af2848260208601610a8b565b91505092915050565b60008060008060008060c08789031215610b1857610b17610917565b5b6000610b2689828a0161096a565b9650506020610b3789828a016109a0565b9550506040610b4889828a016109a0565b945050606087013567ffffffffffffffff811115610b6957610b6861091c565b5b610b7589828a01610acd565b9350506080610b8689828a0161096a565b92505060a0610b9789828a0161096a565b9150509295509295509295565b60008115159050919050565b610bb981610ba4565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b60008060408385031215610bf157610bf0610917565b5b6000610bff8582860161096a565b9250506020610c10858286016109a0565b9150509250929050565b610c2381610941565b82525050565b6000602082019050610c3e6000830184610c1a565b92915050565b600080600060608486031215610c5d57610c5c610917565b5b6000610c6b8682870161096a565b9350506020610c7c8682870161096a565b9250506040610c8d868287016109a0565b9150509250925092565b60008060008060808587031215610cb157610cb0610917565b5b6000610cbf8782880161096a565b9450506020610cd0878288016109a0565b9350506040610ce18782880161096a565b9250506060610cf28782880161096a565b91505092959194509250565b60008060008060808587031215610d1857610d17610917565b5b6000610d268782880161096a565b9450506020610d378782880161096a565b9350506040610d488782880161096a565b9250506060610d59878288016109a0565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d9a81610d65565b82525050565b6000602082019050610db56000830184610d91565b92915050565b610dc481610ba4565b8114610dcf57600080fd5b50565b600081519050610de181610dbb565b92915050565b600060208284031215610dfd57610dfc610917565b5b6000610e0b84828501610dd2565b91505092915050565b610e1d8161097f565b82525050565b6000602082019050610e386000830184610e14565b92915050565b600081519050610e4d81610953565b92915050565b600060208284031215610e6957610e68610917565b5b6000610e7784828501610e3e565b91505092915050565b610e8981610941565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ec9578082015181840152602081019050610eae565b83811115610ed8576000848401525b50505050565b6000610ee982610e8f565b610ef38185610e9a565b9350610f03818560208601610eab565b610f0c816109bf565b840191505092915050565b600060a082019050610f2c6000830188610e80565b610f396020830187610e80565b610f466040830186610e14565b610f536060830185610e14565b8181036080830152610f658184610ede565b90509695505050505050565b600081905092915050565b6000610f8782610e8f565b610f918185610f71565b9350610fa1818560208601610eab565b80840191505092915050565b6000610fb98284610f7c565b915081905092915050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000611000610ffb610ff684610fc4565b610fdb565b610fce565b9050919050565b61101081610fe5565b82525050565b600060608201905061102b6000830186610e80565b6110386020830185611007565b6110456040830184610e14565b949350505050565b600082825260208201905092915050565b7f455243313135353a206d696e74206661696c6564000000000000000000000000600082015250565b600061109460148361104d565b915061109f8261105e565b602082019050919050565b600060208201905081810360008301526110c381611087565b9050919050565b60006060820190506110df6000830186610e80565b6110ec6020830185610e80565b6110f96040830184610e14565b949350505050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e6365206f7220616c6c6f77616e636500000000000000000000000000602082015250565b600061115d60338361104d565b915061116882611101565b604082019050919050565b6000602082019050818103600083015261118c81611150565b9050919050565b60006040820190506111a86000830185610e80565b6111b56020830184610e14565b9392505050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061121860268361104d565b9150611223826111bc565b604082019050919050565b600060208201905081810360008301526112478161120b565b905091905056fea264697066735822122093ae11cb65a7a58ca55c48c38b6bdc7b9b71c0bd179c52300fcd4a9a6318b24864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}